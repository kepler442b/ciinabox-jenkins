jenkins_url: http://jenkins.myciinabox.com/

defaults:
  scripts_dir: ciinaboxes/example/scripts
  github:
    protocol: https                                         # ssh or https
    credentials: my-gh-creds                                # Not required for public repos, this should
                                                            # be ID of Jenkins credentials
                                                            # https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin
jobs:
 - name: GenericGitBuild
   folder: dsl-doc
   git:
     credentials: myGitCreds                                # Credentials with 'myGitCreds' are required in Jenkins credentials store
     url: git@github.com:myOrg/myApp.git                    # Github is used only as an example, can by any git repo
     branch: feature/new-hot-feature                        # Branch name
     repo_target_dir: appcode                               # Checkout in workspace sub-directory

 - name: GenericGitBuildWithRefspec
   folder: dsl-doc
   git:
     url: https://github.com/nodejs/readable-stream         # Public repo - credentials property is not required
     branch: tags/v2.0.4                                    # Build specific tag

 - name: ParallelJob
   concurrentBuild: true

 - name: JobWith10BuildsKept
   folder: dsl-doc
   discardBuilds:
     buildsToKeep: 10                                       # Store latest 10 builds

 - name: JobWith10ArtifactsKept
   folder: dsl-doc
   discardBuilds:
     artifactBuildsToKeep: 10                               # Store latest 10 artifacts

 - name: JobWithBuildsKept10Days
   folder: dsl-doc
   discardBuilds:
     daysToKeep: 10                                         # Store builds for 10 days

 - name: JobWithArtifactsKept10Days
   folder: dsl-doc
   discardBuilds:
     artifactDaysToKeep: 10                                 # Store artifacts for 10 days

 - name: MyLabeledJob
   folder: dsl-doc
   labels:
     - MavenBuild

 - name: MyJobWithParameters
   folder: dsl-doc
   parameters:
     param1: value1                                        # default value is 'value1'
     param2: ''                                            # no default value
     deployment: true                                      # Boolean parameters have true / false value
     deploymentEnvironment:                                # Choice parameter
       - dev
       - stage
       - prod

 - name: MyJobWithParametersDefinedAsMap
   folder: dsl-doc
   parameters:                                            # Define parameters as map of maps
     param1:                                              # Parameter name will be uppercased
       default: true                                      # Default value
       description: 'Deploy artifact?'                    # Parameter description

     param2:
       description: 'If no default value provided, empty string shall be used'

     choice_param:
       options:                                           # Define options for choice parameter
        - option1
        - option2
        - option3
       description: 'Use dropdown form to select value for CHOICE_PARAM'

 - name: MyJobWithDescription
   folder: dsl-doc
   description: My Job Description

 - name: CiinaboxGithub
   folder: dsl-doc
   repo: base2Services/ciinabox                             # GitHub repo, with owner
   branch: master                                           # Branch to build

 - name: CiinaboxGithub-PullRequest
   folder: dsl-doc
   repo: base2Services/ciinabox                             # GitHub repo, with owner

 - name: Ciinabox-MultipleGithub
   folder: dsl-doc
   github:                                                 # Multiple GitHub repos defined as list
    -
     repo: base2Services/ciinabox-jenkins                  # GitHub repo, with owner
     branch: master                                        # Branch to build
     repo_target_dir: jenkins                              # Sub-folder to checkout
    -
     repo: base2Services/ciinabox-pipelines
     branch: master
     repo_target_dir: pipelines

 - name: BitbucketJob
   folder: dsl-doc
   bitbucket:
     credentials: my-bb-creds                               # Credentials to use for authorization with BitBucket
     push: true                                             # Trigger build upon BB push
     cron: "* * * * *"                                      # Poll SCM for changes
     repo: nlstevenen/java-experimenting-with-java-8-features # BB repo to pull sources from
     branch: master                                         # Which branch to build
     repo_target_dir: app_code                              # Checkout in workspace sub-folder

 - name: MultipleBitbucketSCMJob
   folder: dsl-doc
   bitbucket:                                              # You can define multiple SCMs for bitbucket, each checked in
                                                           # in it's own repository
      -
        repo: atlassian/asap-java
        branch: master
        repo_target_dir: app_code
      -
        repo: atlassian/docker-atlassian-bitbucket-server
        branch: master
        repo_target_dir: containers
   shell:
     - script: "mkdir -p $HOME/.m2/repository && cd app_code && docker run --rm -v $PWD:/app -v $HOME/.m2:/var/maven/.m2 base2/maven install"    # Use docker to build application
     - script: "cd containers && docker build -t atlassian/bitbucket . "                 # Build docker image

 - name: SetBuildDesciption
   folder: dsl-doc
   repo: base2Services/ciinabox                             # GitHub repo, with owner
   build_description: My Build ${CUSTOM_VAR}                # Sets build description

 - name: SetBuildDesciptionFull
   folder: dsl-doc
   repo: base2Services/ciinabox                             # GitHub repo, with owner
   build_description:
     description: My Build ${CUSTOM_VAR}                    # Sets build description
     descriptionForFailed: Failed ${CUSTOM_VAR}             # Sets build description on failure
     regularExpression: Uploading[^\s]* ([^\s]*)            # Regex will be applied to each line in the build log
     regularExpressionForFailed: Failed [^\s]* ([^\s]*)     # Regex will be applied to each line in the build log on failure

 - name: JobToCopyArtifactFrom1
   folder: dsl-doc
   shell:                                                  # Execute shell script as build step
    - script: "echo 'test' > resultsjob1.txt"             # Add some text to txt file
   archive:
    - resultsjob1.txt                                     # Archive text file as result

 - name: JobToCopyArtifactFrom2
   folder: dsl-doc
   shell:                                                  # Execute shell script as build step
    - script: "echo 'test' > resultsjob2.txt"             # Add some text to txt file
   archive:
    - resultsjob2.txt                                     # Archive text file as result

 - name: JobToCopyArtifactFrom3
   folder: dsl-doc
   shell:                                                  # Execute shell script as build step
    - script: "echo 'test' > resultsjob3.txt"             # Add some text to txt file
    - script: "echo 'test' > resultsjob3extended.txt"             # Add some text to txt file
   archive:
#    - resultsjob3.txt                                     # Archive text file as result
    - resultsjob3extended.txt

 - name: JobToCopyArtifactsToWildstar
   folder: dsl-doc
   artifacts:
    - job: JobToCopyArtifactFrom*                         # You can use wildcard '*' when specifying job,
                                                          # though you'll need to publish all jobs in single Jenkins Run when using wildcard
                                                          # as wildcard matching is done on client side, and is not part of Jenkins plugin
      file_pattern: "results*.txt"                        # files to include, filter is applied to stored artifacts from matched jobs
      exclude_file_pattern: resultsjob1.txt               # files to exclude, filter is applied to stored artifacts from matched jobs
      optional: true                                      # job won't fail if artifacts is nowhere to be found
   shell:
    - script: "ls -la results*"

 - name: JobToCopyArtifactsToArray                        # This job will fail, as we have excluded results1.txt, and there are no artifacts
                                                          # to copy from. This can be overriden by specifying optional: true
   folder: dsl-doc
   artifacts:
    - job: JobToCopyArtifactFrom1                         # You can specify multiple jobs as an array in artifacts key
      file_pattern: "results*.txt"                        # files to include, filter is applied to stored artifacts from job key
      exclude_file_pattern: resultsjob1.txt               # files to exclude, filter is applied to stored artifacts from job key

    - job: JobToCopyArtifactFrom2
      file_pattern: "results*.txt"

   shell:
    - script: "ls -la results*"

 - name: PipelineJob
   folder: dsl-doc
   parameters:
     key1:
      description: 'Demo params in a pipeline'
      default: 'default key1 value'
   pipeline:
     file: pipelines/helloworld.groovy

 ## Publishing JUnit results

 - name: TestJavaLib
   folder: dsl-doc
   repo: jdufner/junit
   branch: master
   shell:
      # Execute maven tests in docker maven container
    - script: "docker run --rm -w /src -v $PWD:/src -v $HOME/.m2:/root/.m2 maven:3.5.0-alpine mvn test"
   junit: "target/surefire-reports/**/*.xml"
